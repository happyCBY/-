07.25 23:01
vue前端项目初始化:
1、安装vue脚手架（npm install -g @vue/cli）
○3.x版本脚手架（流行2.x和3.x，这个也可以创建2.x项目）
○用于快速生成项目基础架构。
○  vue -V 查看版本号
2、通过脚手架创建项目  vue  ui

3、项目配置babel，路由（哈希模式路由兼容更好），Linter语法检查（标准模式，vuex，使用配置文件

4、下载elementUI插件（vue-cli-plugin-element）按需导入

5、下载axios（运行依赖）等依赖

6、初始化git远程仓库

7、git status查看工作区是否干净。然后创建一个新分支（每开发一个新功能尽量都新建一个分支）完成后再合并到主分支master

8、git checkout -b login    创建一个login分支并切换到该分支
○git branch  查看分支列表
9、清空脚手架自带内容
○App.vue中的结构和样式
○router.js中的路由规则和引入的home
○view文件夹里的两个组件
○components文件夹里的组件
10、新建登录页面的单文件组件（scoped是vue的一个指令，表示样式作用范围。不写样式会全局生效）

   lang属性选择样式语言。less需要安装开发依赖:less-loader  和less依赖


11、路由文件中导入组件，建立路由规则:
     routes:[ { } ]
○path           访问路径，
○component        导入的组件名字
12、App.vue根组件中放入路由占位符 <router-view />

13、默认打开路径为/   需要将/路径重定向到登录页面。新增路由规则重定向:
○path      要访问的路径
○redirect     要重定向到的路径
14、assets目录下新建css文件夹，里面新建全局样式global.css
○入口文件main.js引入样式。
○默认不是全屏。全局定义html,body,#app宽高为100%
15、使用ui组件，在element.js中按需导入需要的组件，并通过Vue.use( Botton )全局注册组件

16、表单预验证后可以发送请求。入口文件引入axios后挂载在Vue.prototype对象上
○配置axios.defaults.baseURL='   '
17、登录成功返回的token值保存在本地存储
○window.sessionStorage.setItem(  )
○this.$router.push( )跳转到后台首页
18、路由页面设置路由导航守卫
○路由实例对象调用beforEach方法。传一个回调函数。
○(to, from, next) to.path为将要访问路径，from表示从哪个路径来。next为一个函数，直接调用为放行next( )，里面写路径表示强制跳转到该路径页面
19、解决语法检查的报错。项目根目录创建一个格式化文件的配置项
○.prettierrc该文件为json格式
○{ semi: false,       //不加分号
          singleQuote: true,   //单引号
          printWidth: 200 }    换行宽度
○提示小括号前要空格的错误可以禁用这个规则。在eslintrc.js的rules的数组中新增一个属性: space-before-function-paren:0
20、登录页面完成。提交到本地仓库后切换到master分支，在合并login分支
○git checkout master
○git merge login      //合并login分支到主分支
21、自定义字体图标
○在assets文件夹放入下载好的字体图标文件夹
○在入口文件中导入字体图标的css样式文件
○在需要用的地方添加类名一个基础类名和一个图标类名
22、项目优化
○生成打包报告
○第三方库启用CDN
○element-ui组件按需加载
○路由懒加载
○首页内容定制
23、运行servr 解决开发环境的警告问题。在运行build编译，解决生产环境的警告问题
○利用插件解决console输出信息  babel-plugin-transfrom-remove-console(开发依赖)，然后在babel.config.js的plugins数组中增加' transfrom-remove-console '。然后重新编译。但这种会把开发模式的输出信息也移除
○判断是开发模式还是生产模式:
const prodPlugins = [ ]    声明一个空数组
if( process.env.NODE_ENV === 'production') {
  prodPlugins.push( ' transfrom-remove-console ' ) } 判断是生产环境。然后把plugins数组中的插件名替换成 …prodPlugins  

24、生成打包报告(编译后控制台看那些文件体积大)

25、3.0脚手架默认隐藏了webpack的配置项。要修改需在根目录新建vue.config.js

26、为开发模式与发布模式指定不同打包入口main-dev.js 和 main-prod.js(为了将项目的开发过程与发布过程分离)
○在vue.config.js导出的配置对象中，新增configureWebpack或chainWebpack节点，来自定义webpack的打包配置
○module.exports= {
       chainWebpack: config => {
○config.when(process.env.NODE_ENV === ' production' , config => {config.entry( 'app').clear( ).add('./src/main-prod.js' )})
○config.when(process.env.NODE_ENV === ' development' , config => {config.entry( 'app').clear( ).add('./src/main-dev.js' )})
27、解决单文件体积过大(因为默认import语法导入的依赖包都会打包合并到同一个文件中)。通过webpack的externals节点，来配置并加载外部的CDN资源，声明过的包就不会被打包
○发布模式下设置哪些依赖項 config.set('externals' , { vue: Vue, vue-router:VueRouter })
○在public文件夹下的index.html里引入这些依赖的外部样式表和JS
○把入口文件main.js引入依赖的css样式删除
28、解决element-ui体积过大。引入CDN资源
○删除生产环境的入口文件中对element-ui的引入
○在index.html引入element-ui的外部样式表和js
29、定制首页内容，安插件 路由懒加载
30、项目上线，配置服务器，开启gzip压缩，配置https服务，

