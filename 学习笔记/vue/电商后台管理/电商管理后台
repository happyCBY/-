1.路由导航守卫
//导航守卫
router.beforeEach((to,from,next)=>{
	//to 代表要访问的路径 to.path 获得访问的路径
	//from 代表从哪个路径跳转 from.path 获得访问的路径
	//next 代表放行 next() 直接放行  next("/login") 强制跳转
	if(to.path === "/login") return next();
	if( !window.sessionStorage.getItem("token")) return next("/login");
	next();

})

2.设置 .prettierrc 文件  当格式化文档的时候 双引号变成单引号  去掉 ; (分号)  这样就符合eslink语法
{
    //去掉 ;
    "semi": false,
    //双引号变成单引号
    "singleQuote": true
}

3.element-ui upload上传图片
<el-upload
	class="upload-demo"
	//action表示图片要上传的后台API地址 一般要写绝对路径
	action="https://jsonplaceholder.typicode.com/posts/"
	//当用户点击上传后的图片时触发
	:on-preview="handlePreview"
	//当移除上传后的图片时触发
	:on-remove="handleRemove"
	//显示文件上传后显示图片的方式
	list-type="picture"
	//设置上传的请求头部，注意，upload组件有自己一套请求服务器的方法，不会调用axios设置的请求拦截
	:header = "{  }"
	>
	<el-button size="small" type="primary">点击上传</el-button>

</el-upload>

4.富文本编辑器
下载 npm install vue-quill-editor --save
脚手架 运行依赖中搜索 vue-quill-editor
文档说明: https://github.com/surmon-china/vue-quill-editor

ssr: 服务器端使用
spa: 客户端使用

全局挂载富文本编辑器
import Vue from 'vue'
import VueQuillEditor from 'vue-quill-editor'

// 导入富文本样式
import 'quill/dist/quill.core.css'
import 'quill/dist/quill.snow.css'
import 'quill/dist/quill.bubble.css'

Vue.use(VueQuillEditor, /* { default global options } */)

5.loadsh 运行依赖插件
是一个一致性、模块化、高性能的 JavaScript 实用工具库。
浏览器环境  先下载loadsh.js文件 再导入
<script src="lodash.js"></script>

npm下载
$ npm i -g npm
$ npm i --save lodash

node.js 中使用
// Load the full build.
var _ = require('lodash');
// Load the core build.
var _ = require('lodash/core');
// Load the FP build for immutable auto-curried iteratee-first data-last methods.
var fp = require('lodash/fp');

// Load method categories.
var array = require('lodash/array');
var object = require('lodash/fp/object');

// Cherry-pick methods for smaller browserify/rollup/webpack bundles.
var at = require('lodash/at');
var curryN = require('lodash/fp/curryN');

vue-cli 在运行依赖中下载loadsh
导入:
import _ from 'loadsh'

使用:
_cloneDeep(要拷贝的对象或数组) 深拷贝
返回拷贝好的的对象或数组

5.项目优化策略:
1、生成打包报告
直接在vue-cli可视化面板中查看报告
或者使用 vue-cli-service build --report生成报告

2、第三方库启用CDN
3、Element-Ui组件按需加载
4、路由懒加载
5、首页内容定制