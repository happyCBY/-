1.组件的注册
(1)全局组件注册模板

Vue.component('组件的名称',{
    data: 组件数据(组件的数据必须是一个函数，而且函数必须有返回值，且返回值必须是一个对象，用户调用对象里面的属性时要使用this.属性名来调用),
    template: '组件模板内容（可以在里面写vue的支持的语法）'
})
例:
<div id="hello">
    <!-- 组件的重用 -->
    <input-demo> </input-demo>
    <input-demo> </input-demo>
</div>
//子组件
Vue.component('input-demo',{
    data: function(){
        return {
            count:0
        }
    },
    template: '<input type="text" :value="count" >'
})
//父组件
var vm = new Vue({
    el: "#hello"
})

(2)注册组件的注意事项
***1)data属性必须是一个函数，返回值必须是一个对象
***2)template模板只能包含一个根元素  ！！！！！！！！！！！
比如:  下面这样是不行的，包含了两个根元素
template: "<button></button><button></button>"
这样是可以的，只包含一个div的根元素
template: "<div><button></button><button></button></div>"

***3)当模板比较复杂的时候可以使用es6的模板字符串，当然，前提是浏览器要支持模板字符串
例:
template:
`
<div>
    <button></button>
    <button></button>
</div>

***4)组件的命名方式
普通命名:
Vue.component('demo',{...});
短横线方式:  推荐！
Vue.component('input-demo',{...});
驼峰命名法:  注意这种方式命名的话，在调用的时候要改回短横线方式,且字母必须要小写
Vue.component('inputDemo',{...});
调用时: <input-demo></input-demo>

***5)注意:全局组件里面可以套用全局组件
例:
// 组件的注册
Vue.component('input-demo', {
    data: function () {
        return {
            count: 0
        }
    },
    template: `<div>0</div>`
})
Vue.component('input-demos', {
    data: function () {
        return {
            count: 1
        }
    },
    template: `<div><input-demo></input-demo>{{count}}</div>`
})


(3)局部组件注册
在vue实例化对象里面添加一个components属性，在里面实现局部组件的注册，和filters以及directived差不多,调用方法和全局组件一样
注意:局部组件只能在注册它的父组件里面使用
components: {
    "注册组件名称": {
        data: {
            function(){
                return ...
            }
        }
    },
    template: "模板内容"
}
例:
components: {
    "input-demo": {
        data:function() {
            return {
                count: 1
            }
        },
        template: '<input type="text" :value="count" >'
    },
}

2.父组件向子组件传值
在component中引入props属性，props是一个数组，在其中定义接收父元素传入的值
***props的命名规则: 在props里面使用驼峰命名法时，模板中需要使用短横线方式(如props里面一个变量名定义为getTime,则在父组件传值的时候要使用get-time传值)，字符串形式的模板没有这个限制规则(如template模板)，原因是由于html对大小写不敏感

注意:  :title = "13" 传递到子组件的时候是数字13 而 title = "13"传递到子组件的时候是字符串"13"
注意: props是单向传递数据的，子组件能够操作props里面的数据，比如props里面有一个数组arr,则子组件可以直接使用arr.push()向数组里面填数据

例:
<div id="app">
    <cs1 :title="say"></cs1>
</div>
Vue.component("cs1",{
    //接收父组件传来的title值，注意数组里面接收的变量的名称要和父元素传进来的变量名称一致
    props: ['title'],
    data:
        function (){
            return {
                count: "我是一级"
            }
        }
    ,
    template: "<div>{{title}}</div>"
})
var vm = new Vue({
    el: "#app",
    data: {
        say: "父组件是我"
    }
})

3.子组件向父组件传值
(1)子组件向父组件传递信息
***子组件 使用 $emit(方法名) 自定义方法，父组件监听方法
例:
<div id="app">
    <div :style="{color: fontSize}" aaa> 哈哈哈  </div>
    <cs1 :title="say" @big = "handel" ></cs1>
</div>
Vue.component("cs1",{
    template: `
    <div>
    <input type = 'button' @click = " $emit('big') " value = '切换颜色' >
    </div>
    `
})
 methods: {
    handel: function (){
        var arr = [1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f'];
        var color = "";
        for(var i = 0; i < 6; i++) {
            var num = Math.floor(Math.random()*arr.length);
            color += arr[num];
        }
        this.fontSize = "#"+color;
    }
}
(2)子组件向父组件传递参数
***子组件使用 $emit('自定义方法名','传递的参数'), 父组件监听方法 @子组件定义的方法名 = "父组件执行的方法($event)" 此时的$event就是子组件传递过来的参数,固定写法
例:
<div id="app">
    <div :style="{color: fontSize}" aaa> {{msg}}  </div>
    <cs1 :title="say" @big = "handel($event)" ></cs1>
</div>
Vue.component("cs1",{
    template: `
    <div>
        <input type = 'button' @click = " $emit('big','我是参数') " value = '切换颜色' >
    </div>
    `
})
methods: {
    handel: function (msg){
        this.msg = msg;
    }
}
(3)子组件向父组件传递多个参数
***子组件使用 $emit('自定义方法名','传递的参数1','传递的参数2'), 父组件监听方法 @子组件定义的方法名 = "arguments" 此时的arguments就是子组件传递过来的参数的集合,arguments是个伪数组
例:
template: `
<div>
    <input type = 'button' @click = " $emit('big','我是参数','我也是参数') " value = '切换颜色' >
</div>
`
<cs1 :title="say" @big = "handel(arguments)" ></cs1>
=====================
provide和inject传值
provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中; 并且这对选项需要一起使用; 以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。
例：
//父组件:
provide: { //provide 是一个对象,提供一个属性或方法
  foo: '这是 foo',
  fooMethod:()=>{
    console.log('父组件 fooMethod 被调用')
  }
},

// 子或者孙子组件
inject: ['foo','fooMethod'], //数组或者对象,注入到子组件
mounted() {
  this.fooMethod()
  console.log(this.foo)
}
//在父组件下面所有的子组件都可以利用inject
provide 和 inject 绑定并不是可响应的。这是官方刻意为之的。 然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的,对象是因为是引用类型
=====================
=====================
parent:父实例  children:子实例

//父组件
mounted(){
  console.log(this.$children) 
  //可以拿到 一级子组件的属性和方法
  //所以就可以直接改变 data,或者调用 methods 方法
}

//子组件
mounted(){
  console.log(this.$parent) //可以拿到 parent 的属性和方法
}
children和parent 并不保证顺序，也不是响应式的 只能拿到一级父组件和子组件
=====================

=====================
$refs 传递值
// 父组件
<home ref="home"/>

mounted(){
  console.log(this.$refs.home) //即可拿到子组件的实例,就可以直接操作 data 和 methods
}
=====================

=====================
 .sync
 在 vue@1.x 的时候曾作为双向绑定功能存在，即子组件可以修改父组件中的值; 在 vue@2.0 的由于违背单项数据流的设计被干掉了; 在 vue@2.3.0+ 以上版本又重新引入了这个 .sync 修饰符;
// 父组件
<home :title.sync="title" />
//编译时会被扩展为
<home :title="title"  @update:title="val => title = val"/>

// 子组件
// 所以子组件可以通过$emit 触发 update 方法改变
mounted(){
  this.$emit("update:title", '这是新的title')
}
=====================

=====================
v-slot
作用域插槽: 子组件内数据可以被父页面拿到(解决了数据只能从父页面传递给子组件)
// 父组件
<todo-list>
 <template v-slot:todo="slotProps" >
   {{slotProps.user.firstName}}
 </template> 
</todo-list> 
//slotProps 可以随意命名
//slotProps 接取的是子组件标签slot上属性数据的集合所有v-bind:user="user"

// 子组件
<slot name="todo" :user="user" :test="test">
    {{ user.lastName }}
 </slot> 
data() {
    return {
      user:{
        lastName:"Zhang",
        firstName:"yue"
      },
      test:[1,2,3,4]
    }
  },
// {{ user.lastName }}是默认数据  v-slot:todo 当父页面没有(="slotProps")
=====================


4.兄弟组件之间传值
var hub = new Vue() 创建一个事件处理中心,使用 hub.$on("事件名",事件处理函数) 监听事件， 使用hub.$emit("事件名",参数) 触发事件，并传递参数，然后使用 hub.$off( "事件名")来销毁事件
例:
<div id="app">
    <cs1></cs1>
    <cs2></cs2>
</div>
//设置事件处理中心
var hub = new Vue();

//兄弟组件A
Vue.component("cs1", {

    data: function () {
        return {
            num: 0
        }
    },
    template: `
    <div>
        <div>A的数值: {{num}} </div>
        <input type = 'button' @click = " hubs " value = '触发B事件' >
    </div>
    `,
    methods: {
        hubs: function(){
            console.log(this);

            hub.$emit("B", 1)
        }
    },
    mounted: function () {
        hub.$on("A", (num) => {
            console.log(this);

            this.num += num;
        });
    }
})

//兄弟组件B
Vue.component("cs2", {

    data: function () {
        return {
            num: 0
        }
    },

    template: `
    <div>
        <div>B的数值: {{num}} </div>
        <input type = 'button' @click = " hubs " value = '触发A事件' >
    </div>
    `,
    methods: {
        hubs: function(){
            hub.$emit("A",2);
        }
    },
    mounted: function () {
        hub.$on("B", (arr) => {
            this.num += arr
        });
    }
})

var vm = new Vue({
    el: "#app",
    data: {
        li: [1, 2, 3]
    },
    methods: {
        handel: function (msg, fontSize) {
            Vue.set(vm.li, 2, "hh");
        },
        //注销事件A
        del: function (){
            hub.$off("A");
        }
    }
})
=========================
在vue2.4版本以上
可以使用 $attr和$listeners进行祖孙组件传递 A=>B=>C
例：
爷组件:
<template>
    <div id="app">
     	<son :info="info" @getData="getData"></son>
     	<div>{{msg}}</div>
    </div>
</template>

父组件:
<template>
    <temp-son v-bind="$attrs" v-on="$listeners"></temp-son>
</template>

孙组件：
<template>
  <div>
    <h1 class="btn">{{this.$attrs.info}}</h1>
  </div>
</template>

<script>
    export default {
      name: "temp-son",
      mounted() {
        this.$emit('getData','我来自孙子组件')
      }
    }
</script>

=========================


5.组件插槽的基本用法
子组件的template模板中使用 <slot></slot> 来接收 父组件 传递过来的参数，父组件传递的值为组件标签的 innerHTML,
如果父组件没有传值过来，子组件 <slot>默认内容</slot>  里面有默认的内容则会显示默认的内容，如果父元素有传值则会将默认内容替换成父组件传递的值
(1)普通插槽模板:
<demo-s>父组件传递的值</demo-s>
Vue.component("demoS",{
    template: `
        <div>
            //<slot></slot>就相当于父元素传递的参数显示
            <slot></slot>
        </div>
    `
});
例:
<demo-s>我是父组件传递的值</demo-s>
Vue.component("demoS",{
    template: `
        <div>
            <slot>默认内容</slot>
        </div>
    `
});

结果模板输出为:
<div>
    父组件传递的值
</div>

(2) 具名插槽模板
<demo-s>
    <p slot = "x(子组件定义接收参数的名字)" >我是x</p>
    <p slot = "y(子组件定义接收参数的名字)" >我是y</p>
    <!-- template标签是vue提供的一个标签，往插槽添加多个标签  -->
    <template slot = "c" >
        <p>我是c</p>
        <p>我也是c</p>
    </template>
</demo-s>
Vue.component("demoS",{
    template: `
        <div>
            <slot name="x(自定义名称)" ></slot>
            <slot name="y(自定义名称)" ></slot>
            <slot name="c(自定义名称)" ></slot>
        </div>
    `
});

(3)作用域插槽
该插槽一般用于父组件对子组件进行加工
Vue.component("demoS",{
    props: ['arr'],
    template: `
        <div>
            <ul>
                <li v-for = "attr in arr" >
                    <!-- item是自定义属性，attr是要传递的值,可以传递多个参数 -->
                    <slot :item = "attr" :a = "我是传递的第二个参数" ></slot>
                </li>
            </ul>
        </div>
    `
});
<demo-s :arr = "fruits" >
    <!-- slotProps是自定义名字，是一个对象，里面存储着子组件传递过来的参数,子组件传递多个参数的话，slotProps用一个数组接收多个参数-->
    <template slot-scope = "slotProps" >
        <strong v-if = "slotProps.item.id==3" > {{slotProps.item.name}}  </strong>
        <span class="color" v-else >{{slotProps.item.name}}</span>
    </template>
</demo-s>
data: {
    fruits: [
        {
            id: 1,
            name: "apple"
        },
        {
            id: 2,
            name: "banana"
        },
        {
            id: 3,
            name: "lemon"
        }
    ]

}

6.component标签
将component标签替换成 is的值所代表的组件中template的内容
<component is = "组件名称" > </component>

例:
<div id="app">
    <component is = "cpt" > </component>
</div>


var vm = new Vue({
    el: "#app",
    component: {
        cpt: {
            template: "<h1> 我是替换的组件 </h1>"
        }
    }
})

============================
ref和$refs的使用
<div id="app">
  <h1>{{ message }}</h1>
  <button ref="myButton" @click="clickedButton">点击偶</button>
</div>
let app = new Vue({
    el: '#app',
    data () {
        return {
            message: 'Hi!大漠'
        }
    },
    methods: {
        clickedButton: function () {
            console.log(this.$refs)
            this.$refs.myButton.innerText = this.message
        }
    }
})
点击按钮之后，按钮的文本将更改变“Hi,!大漠”：