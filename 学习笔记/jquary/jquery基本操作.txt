相当于jQuery文件
jQuery入口函数:
1.等页面加载完毕再执行:
第一种方式:
$(document).ready(function(){
})
第二种方式:
$(function(){
})
第三种方式: （低版本使用）
$(window).load(function(){
})
方法一和二相当于原生js中的DOMContentLoaded，等Dom结构渲染完毕即可执行内部代码
不同于原生js中的load事件是等页面文档，外部js文件，css文件，图片加载完毕才执行的内部代码
方法三相当于js中的load对象



$是jQuery的顶级对象，$是jquery的别称，$相当于jQuery

$释放控制权:
var aa = $.noConflict(); 释放$控制权给aa，aa就相当于$了
=======================================
1. jQuery 对象和DOM对象
用原生js获取的对象就是DOM对象
例如: var btn = document.querySelector('div')
jQuery方法获取的元素就是jQuery对象
例如: $('div');
2. jQuery对象本质是利用$对Dom对象进行包装后产生的对象（伪数组的形式存储）
3. jQuery 对象只能使用 jQuery方法，Dom对象则使用原生的JavaScript的属性和方法
=======================================
jQuery对象 和 DOM对象 之间的转换:

jQuery转DOM对象:
方法1: $('video')[index] index是索引号;
方法2: $('video').get(index) index是索引号

DOM对象转 jQuery对象:
var video = document.querySelector('video');
$(video);
=======================================
！！！！！！！！！！
jQuery选择器

jQuery 基础选择器:
原生js获取元素方法很多，很杂，兼容情况不一致， jQuery做了封装，使获取元素统一标准
id选择器: $("#id");
全选选择器: $("*");
类选择器: $(".class");
标签选择器: $("div");
并集选择器: $("div,p,li");
交集选择器: $("li.current");
子代选择器: $("ul>li");
后代选择器: $("ul li");

jQuery筛选选择器:
$("ul li:first") 获取第一个元素
$("ul li:last") 获取最后一个元素
$("ul li:eq(index)") 获取第index个元素
$("ul li:odd) 获取奇数的元素
$("ul li:even) 获取偶数的元素

jQuery筛选方法:
parent() 查找父级
parents("选择器x") 查找选择器名为x的父级
children(selector) 相当于$("ul>li"),最近一级(亲儿子)，寻找的方式是一层一层执行下去
例如:
<div>
    <div class="one">
        <div class="three"></div>
    </div>
    <div class="two">
        <p></p>
    </div>
</div>
var odiv = $('div').children('div');
console.log(odiv);
获取的元素排序为.one .two .three
find(selector) 相当于$("ul li"),后代选择器，选取所有的子孙后代
siblings(selector) 查找兄弟节点，不包括自己本身
nextAll([expr]) 查找当前元素之后的所有同辈元素
prevAll([expr])  查找当前元素之前的所有同辈元素
hasClass(class) 检查当前元素是否含有某个特定的类，如果有则返回true
eq(index) 例如:$("li").eq(2)相当于$("li:eq(2)");
=======================================
jQuery设置样式:
$('div').css("属性","值")
$('div').css({
    属性: 值,
    属性: 值
    ...
})
=======================================
隐式迭代!!!!!!!!!!
遍历内部DOM元素（伪数组形式存储）的过程叫做隐式迭代
例如:$('div').css("属性","值");
遍历所有div并添加css方法
=======================================
链式编程:
方法返回一个对象
var obj = {
    this.f1 = function() {
        console.log("f1");
        return this;
    }
    this.f2 = function() {
        console.log("f2");
        return this;
    }
}
obj.f1().f2();
断链:
$("div").siblings().show();
end()恢复断链:
$("div").siblings().end().show();
=========================================
操作类的方法:
addClass: 添加类
removeClass: 移除类
toggleClass: 切换类
hasClass: 判断是否有这个类