版本管理是一种记录文件变化的方式，以便用户查看特定版本的内容信息

人为维护版本的问题:
1.文件数量过多，导致文件命名命名不清晰，导致文档版本混乱
2.每次更新文档时要对之前的版本进行复制
3.多人同时编辑一个文档时容易产生覆盖

Git是一款版本管理控制系统，它可以在任何时间点，将文档存储起来作为更新记录保存起来，也可以在任何时间点将更新的记录恢复过来

Git的工作流程:
将工作目录下更改的文件提交到 暂存区 中，然后将 暂存区 中的文件提交到Git仓库存储

================================
Git使用前配置
在使用Git前要对git进行配置，需要告诉git你是谁，在提交文件到仓库的时候会记录提交的人是谁，以便多人编辑时程序出错时快速找到是谁的代码出错

//配置提交人姓名
git config --global user.name 姓名
//配置提交人邮箱
git config --global user.email 邮箱
//查看git的配置信息
git config --list

想修改提交人姓名的话直接重新执行一遍上面面操作即可，或者找到 c盘-->用户-->当前使用的用户-->gitconfig配置文件，打开后在里面配置即可
=================================
git使用方法:

//初始化git仓库
git init
//查看文件状态
git status 文件名称
//添加文件到暂存区  将最后一次保存的文件添加到暂存区
git add 文件名称
//将暂存区的文件存储到仓库  注意提交的时候必须要备注提交信息，说明你这次提交修改了哪些东西方便日后查看
git commit -m 提交信息
//查看提交记录
git log

//将文件内容恢复到暂存区最后存储的那个文件内容
git checkout 文件名称
//删除暂存区中的文件 注意只是删除暂存区中的文件，工作目录中依旧存在
git re --cached 文件名称
//将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录
！！注意一但恢复，git仓库里的其他记录都会消失，只会保留恢复记录的那条信息，并且工作目录和暂存区都会恢复到需要恢复记录的那条信息时候的工作目录和暂存区
git reset --hard  需要恢复记录的id

//切换分支  注意，在切换分支的时候一定要把暂存区的文件存储在git仓库里面，要不然文件就会跑到切换的那个分支里面，并且要管理那些没被管理的文件,要不然会报错
git checkout 分支名称
//查看分支
git branch
//创建分支
git branch 分支名称
//创建子分支
git checkout -b 分支名称

//合并分支 最好在创建该分支的主分支上 和并 该分支  注意！ 合并完分支，那个被合并的分支依旧存在，不会被删除
git merge 来源分支
//删除分支 注意如果该分支还没有被合并，不能被删除
git branch -d 删除分支的名称
//强制删除 就算分支没有被合并也能删除
git branch -D 删除分支的名称

//暂时保存分支更改内容 用于切换分支时不想将当前的暂存区内容提交到git仓库中时，可以将它暂时存储
//注意！保存分支更改的内容时，如果存在没有被管理的文件，直接保存的话没被管理的文件内容会恢复到上一次存储的内容
git stash
//恢复暂时存储的数据 注意在哪个分支使用git stash pop，数据就会恢复在那个分支上，所以恢复的时候一定要注意当前是哪个分支
git stash pop

======================================
github 远程仓库

注意！第一次推送的时候需要登录github，账号和密码会自动被记录在控制面板中的 window凭据中

//将本地仓库推送到远程仓库
git push 远程仓库地址 要推送的分支名称
//给远程仓库起别名
git remote add 要取的别名 远程仓库地址
//记住推送地址及分支
git push -u 取的别名 要推送的分支名称
//记住推送地址后只要使用git push就可以直接将分支推送到远程仓库中
git push

======================================
如果有多人同时开发共用一个仓库时

首先其他人需要 克隆远程仓库
git clone 远程仓库的地址

其次该仓库的拥有者需要向其他开发人员发送邀请链接

Settings-->Collaborators-->在文本框里面输入邀请人员的账号

======================================
拉取远程仓库最新的数据  注意如果远程仓库的版本比本地仓库的版本高，那么本地仓库不能向远程仓库推送信息，必须更新为和远程仓库一样的版本后才能推送信息
git pull 仓库地址 分支名称
===================================
多人开发冲突: 当有两个或两个以上的程序员修改了某一个开发文件的相同地方，第一个将仓库提交给远程仓库的会成功，后面提交的则会失败，因为远程仓库的那个文件的版本已经更新了，必须下载新的远程仓库信息后才能对其修改
解决冲突的方法只能线下程序员自己交流沟通解决
==================================
跨团队协作:
1.程序员C去程序员A的远程仓库 fork一份 就是复制一份到自己的远程仓库
2.程序员C将远程仓库克隆到本地仓库进行修改
3.程序员C将本地仓库推送到远程仓库
4.程序员C 发起 pull request
5.程序员A在 pull request 审核程序员C更改的内容
6.程序员A觉得C修改的很合理则可以选择合并代码 merge pull request

=================================
ssh免密登录
步骤:
1.生成 ssh公钥和私钥
命令: ssh-keygen
生成的一个ssh文件夹存在c盘当前用户目录下，里面包含一个公钥id_rsa.pub和一个私钥id_rsa
2.在github官网中点击自己头像-->settings-->SSH and GPG keys -->new SSH key -->把公钥里面的内容复制到文本框里面 -->Add SSH key
3.去自己的远程仓库里面  点击 clone or download --> use SSH 将远程仓库的地址改成SSH协议，接下来的操作和以前一样即可
================================
git忽略清单:
将不需要被git 管理的文件名字添加到 .gitignore(固定命名) 文件中，在执行git 命令的时候，git会忽略这些文件

注意！.gitignore只能忽略那些没有被管理过的文件，被管理过的文件不生效

添加所有的未被管理的文件到暂存区
git add .
======================================
设置远程仓库的说明: 在项目的根目录下添加 readme.md文件，然后管理文件并把文件推送到远程仓库，远程仓库会自动读取这个文件，文件里面的内容会显示在浏览器上面