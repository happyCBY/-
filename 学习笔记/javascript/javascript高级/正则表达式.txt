创建正则表达式:
通过RegExp对象创建:
例:
var reg = new RegExp(/123/);
通过字面量创建:
例：
var reg = /123/;

. 匹配除了\n之外的任意字符

[] 表示的是范围
[0-9] 匹配的是0-9这些数字
注意如果想要匹配100到200之间的数不能用[100-200]这样的表达式要用[1][0-9][0-9]这样的表达式
[a-z]表示的是匹配小写字母a-z
[A-Z]表示的是匹配大写字母A-Z
[a-zA-Z]表示的是匹配全部的大小写字母
[a-zA-Z0-9]表示的是匹配全部的大小写字母以及0-9之间的数字
[]还有另一个作用就是把其他元字符的含义干掉，比如[.]仅仅只是匹配 . 这个字符

| 或
[a-z]|[0-9]表示的是要么是一个数字要么是一个字符
() 分组 提升优先级
[]|([a-z])|[A-Z] 会先匹配[a-z] 从最左边开始算


* 表示*前面的表达式出现了0次或多次
+ 表示+前面的表达式出现了1次或多次
? 前面的表达式出现0次或1次，最少是0次最多是1次，另一个含义:阻止贪婪模式
贪婪模式:一个表达式可以匹配多个字符串

限定符: 限定前面的表达式出现的次数
{} 更加明确前面表达式出现的次数
{0,} 跟*相同
{1,} 跟+相同
{0,1} 跟?相同
{5,10} 前面表达式出现5次到10次
{4} 前面表达式出现4次
{,10} 错误的写法

^ 表示的是以什么开始，或者是取反
^[0-9]以数字开头
[^0-9]非数字字符

$ 表示的是以什么结束
[0-9][a-z]$ 表示以小写字母结束
^[0-9][a-z]$ 相当于严格模式，必须是"4f"这样的字符串才能匹配

精确匹配: /^...$/;

\d 数字中的任意一个,相当于[0-9]
\D 非数字中的一个
\s 空白符中的一个
\S 非空白符
\w 非特殊符号 等价于 [0-9a-zA-Z_]
\W 特殊符号 等价于 [^0-9a-zA-Z_]

括号总结:
[] 字符集合
{} 量词符
() 优先级

全局匹配：
/.../g
忽略大小写
/.../i

正则表达式的一些方法：
1.RegExp对象:
test: 匹配字符串 返回boolean值
exec: 提取字符串，注意每次只能提取到符合条件的第一个数值

2.String 对象:
match：提取多个对象,返回一个数组
例:
str.match(/.../);
split: 切割字符串，返回一个数组
例：
str.split("/.../");
replace: 替换字符串，只能替换第一个找到的字符串
例：
str.replace("/\s/g","x") 把字符串里面所有的空格替换成x

贪婪模式和非贪婪模式:
贪婪模式：
/<.>/ 的标签匹配所有
非贪婪模式：
/<.?>/