实例对象和构造函数之间的关系:
1.实例对象是通过构造函数创建的----->创建的过程叫做实例化
2.如果判断这个对象是不是这个数据类型
    1)通过构造器的方式  实例对象.构造器==构造函数名字
    案例1:
    function Animal(name){
        this.name = name;
    }
    var dog = new Animal("小黄");
    console.dir(dog.constructor == Animal);
    console.dir(Animal);
    2)通过 对象 instanceof 构造函数名
    案例1:
    function Animal(name){
        this.name = name;
    }
    var dog = new Animal("小黄");
    console.dir(dog instanceof Animal);

    尽可能的使用第二种方式来识别

案例1:
function Animal(name) {
    this.sayhi =sayhi;
}
function sayhi() {
    console.log("name");
}
var per1 = new Animal("dd");
var per2 = new Animal("gg");
console.log(per1.sayhi == per2.sayhi);
输出true,两个对象的方法在同一个内存中(但是这样子命名是不好的，容易造成命名冲突)

案例2:
function Animal(name) {
this.sayhi = function () {
    console.log("name");
};
}
var per1 = new Animal("dd");
var per2 = new Animal("gg");
console.log(per1.sayhi == per2.sayhi);
输出false,此时两个对象的方法是不一样的，不在同一个内存中

案例3
function Animal(name) {
}
Animal.prototype.sayhi = function() {
    console.log(name);
}
var per1 = new Animal("dd");
var per2 = new Animal("gg");
console.log(per1.sayhi == per2.sayhi);
输出true,通过原型的方式来添加方法，解决数据共享，节省内存空间