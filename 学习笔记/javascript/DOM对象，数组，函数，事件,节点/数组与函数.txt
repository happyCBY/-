数组！！！！！

数组的概念: 一组有序的数据
数组的作用: 可以一次存储多个数据
数组的定义:
方式1: 通过字面量创造数组
var 数组名 = []


方式2: 通过构造函数创建数组
var 数组名 = new Array();
var array = new Array();
alert(array);
注意！数组的名字如果直接输出，那么可以把数组里面的数据显示出来，如果没有数据就看不到数据
var 数组名 = new Array(长度);
注意！如果数组中没有数据，但是定义了数组的长度，那么数组中的每个组是underfined
var 数组名 = new Array(元素1，元素2，...)
注意！如果用构造函数定义数组Array里面只有一个数字的时候，是定义数组的长度,如果有多个数字
则为直接给数组添加数据


数组: 一组有序的数据
数组元素: 数组中存储的每个数据都可以叫数组的元素
数组长度: 数组元素的个数
数组索引(数组下标): 从0开始，到数组的长度-1

arguments: 伪数组
使用arguments对象可以获取传入的每个参数的值


函数！！！！！！

函数: 把一坨重复的代码封装，在需要的时候直接调用即可
函数的作用: 代码的重用
函数的定义:
语法:
function 函数名(参数) {
    函数体---
}
函数的调用:
函数名();


函数参数: 在函数定义的时候，函数名后面的小括号里面的变量叫做参数
形参: 函数在定义的时候小括号里面的变量为形参
实参: 函数调用的时候给小括号传入的值叫实参，传入的值可以是字面量或者是变量

注意！！！！
1.函数需要先定义才能使用
2.函数的名字要遵循驼峰命名法
3.函数一旦重名，后面的会把前面的覆盖掉
4.形参的个数和实参的个数可以不一样,实参比形参多的话，只取前面的形参的个数，但是多余的实参会存储在arguments中
形参比实参多的话，没有接受到实参的形参值为underfined

function count(x,y){return x+y};
count(a,b,c,d); a,b传值进去，c,d没用

function count(x,y){return x+y};
var num = count(a); num为NaN
5.函数传参进去，但是传进去的值没有赋值，则返回值为NaN

function count(x,y){return x+y};
var x;
var y;
var num = count(x,y); num为NaN

6.函数都有返回值，有return就返回renturn后面的值，没return就返回underfined
function count(x,y){};
var num = count(a,b); num为underfined
7.函数没有明确的返回值，但是调用函数的时候接收了，那么接收的那个值为underfined
function count(x,y){return;};
var num = count(a,b); num为underfined
8.return后面的代码是不执行的




函数！！！！！！！！！！！

命名函数: 函数如果有名字就是命名函数
匿名函数: 函数如果没有名字就是匿名函数,匿名函数不能直接调用

函数定义:
1.函数声明---函数调用: 重名会覆盖
function 函数名(){函数体};
函数名();(调用)
例1:
 function f1() {
    console.log("老张好帅哦");
}
f1();
function f1() {
    console.log("老陈好帅哦");
}
f1();
最后会输出两次"老陈好帅哦"!

2.函数表达式: 函数表达式后面要加分号
var 变量 = function(){}; 此时变量里面存储的就是一个函数，这个变量就相当于一个函数
变量(); (调用)

函数的自调用----一次性的函数---
(function(){})();直接调用

例1:
var f1 = function() {
    console.log("老张好帅哦");
};
f1();
var f1 = function() {
    console.log("老陈好帅哦");
};
f1();
最后两个各输出一次
例2:
 (function() {
    console.log("老陈好帅哦");
})();

注意！！
1.函数是有数据类型的，数据类型是function
2.函数可以做参数使用，只要一个函数作为参数使用，那么这个函数叫做回调函数
例1:
function f1(fn) {
    console.log("老张好帅哦");
    fn();
}
function f2() {
    console.log("老陈好帅哦");
}
f1(f2);
3.函数可以作为返回值使用
function f1() {
    return function(){console.log("你好啊！")};
}
var f2 = f1();
f2();
