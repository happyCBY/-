1.同步api:
同步api指的是只有上一行代码执行完才能执行下一行代码的api
例如:
console.log("a");
console.log("b");
只有a执行完才能执行b
=========================
异步api：
异步api指得是该行代码不影响后面代码的执行
console.log("a");
setTimeout(()=>{
    console.log("b");
},0);
console.log("c");
a执行完直接执行c,b最后执行
=========================
同步api和异步api的区别:
同步api可以从返回值中拿到结果，而异步api不行
例:
//同步
function a(){
    return 10;
}
console.log(a()); 输出10
//异步
function a(){
   setTimeout(()=>{
       return 10;
   },200);
}
console.log(a()); 输出underfined
===================================
回调地狱: 要依次读取a文件，b文件,c文件的时候:
fs.readFile(pathA,'utf8',(err,doc)=>{
    console.log(doc);
    fs.readFile(pathB,'utf8',(err,doc)=>{
        console.log(doc);
            fs.readFile(pathC,'utf8',(err,doc)=>{
                console.log(doc);
            })
    });
});
=======================================
Promise
Promise的用法: 成功的结果用resolve返回,Promise对象用promise.then(result)中的result接收,失败的结果用reject返回，Promise对象用promise.catch(err)中的err接收，不管成功还是失败都会执行.finally()方法
p.then(function(data){ //data为成功时返回的数据 })
p.catch(function(data){//此时的data为失败时返回的数据})
p.finally(function(){//定义一些提示信息，无论成功还是失败都会执行，目前还不是正式的标准})
例:
const fs = require("fs");
let promise = new Promise((resolve,reject)=>{

    fs.readFile("ss",(err,doc)=>{
        if(err==null) {
            resolve(doc);
        }else {
            reject(err);
        }
    });
});
promise.then((result)=>{
    console.log(result);
})
.catch(err=>{
    console.log(err);
})

Promise 解决回调地狱

function f1(){
    return new Promise((resolve,reject)=>{
        fs.readFile("./1.js","utf8",(err,doc)=>{
            resolve(doc);
            // reject(err);
        });
    });
}
function f2(){
    return new Promise((resolve,reject)=>{
        fs.readFile("./2.js","utf8",(err,doc)=>{
            resolve(doc);
            // reject(err);
        });

    });
}
function f3(){
    return new Promise((resolve,reject)=>{
        fs.readFile("./3.js","utf8",(err,doc)=>{
            resolve(doc);
            // reject(err);
        });
    });
}
//链式编程
f1().then(err1=>{
    console.log(err1);
    return f2();
}).then(err2=>{
    console.log(err2);
    return f3();
}).then(err3=>{
    console.log(err3);
});
// 可改成
//
f1().then(err1=>{
    console.log(err1);

});
f2().then(err2=>{
    console.log(err2);

});
f3().then(err3=>{
    console.log(err3);
});
//
========================================================
Promise对象封装原生Ajax:                               ||
                                                      ||
function fzAjax(url) {                                ||
return new Promise ((resolve, reject)=>{              ||
    var xml = new XMLHttpRequest();                   ||
    xml.onreadystatechange = function (){             ||
        if(xml.readyState == 4) {                     ||
            if(xml.status == 200){                    ||
                resolve(xml.responseText);            ||
            }else {                                   ||
                reject("error");                      ||
            }                                         ||
        }else {                                       ||
            return ;                                  ||
        }                                             ||
    }                                                 ||
    xml.open("get", url);                             ||
    xml.send();                                       ||
})                                                    ||
}                                                     ||
========================================================

Promise常用的Api:
Promise.all([a1,a2,a3]) 并发处理多个异步任务,all方法传入参数为一个数组，数组里面存储的是异步任务，所有的任务都执行完才能得到结果，且结果是一个数组，里面存放者多个异步任务的返回值，返回值顺序为传入异步任务的顺序，和执行快慢无关

例:
//异步任务
var a1 = fzAjax("http://localhost:3000/home/a1");
var a2 = fzAjax("http://localhost:3000/home/a2");
var a3 = fzAjax("http://localhost:3000/home/a3");

Promise.all([a1,a2,a3]).then(function (data){
    //这里data返回值为一个数组，[a1的返回值，a2的返回值，a3的返回值]
    console.log(data);
})

Promise.race() 并发处理多个异步任务，只要有一个任务完成就能得到结果，得到的结果为最先完成任务的那个异步函数返回的数值

例:
//异步任务
var a1 = fzAjax("http://localhost:3000/home/a1");
var a2 = fzAjax("http://localhost:3000/home/a2");
var a3 = fzAjax("http://localhost:3000/home/a3");

Promise.race([a1,a2,a3]).then(function (data){
    //此时得到的就a1,a2,a3这三个任务中最快返回结果的异步函数的返回值
    console.log(data);
})
=================================
async 关键字
1.普通函数前加了async就变成异步函数
2.让异步函数的返回值默认为Promise对象
3.在异步函数内部中使用throw抛出异常，throw后面的代码都不执行
例:
async function a() {
    return 123;
}
console.log(a()); 输出为promise{123}
例2:
async function a() {
    return 123;
}
a().then((result)=>{
    console.log(result);
});
================================
await关键字 只能在异步函数里使用，可以暂停异步函数，只有当当前的异步函数执行完毕后才执行下一个异步函数,并且接收异步函数的返回值
例:
async function f1(){
    return "f1";
}
async function f2(){
    return "f2";
}
async function f3(){
    return "f3";
}

async function run() {
    let n1 = await f1();
    let n2 = await f2();
    let n3 = await f3();
    console.log(n1,n2,n3);
}
run();
===================================
/**
 * util模块下的promisify方法
 */

 const promisify = require("util").promisify;

 let readFile = promisify(fs.readFile);

 async function run() {
    let f1 = readFile("./1.js","utf8");
    console.log(f1);
 }
 run();