三个模块
用户模块: 用户自己写的模块
系统模块: 系统自带的模块
第三方模块: 别人写的模块，引用

====================================================
file文件模块
首先引入系统模块：
例：
const fs = require("fs");


然后使用系统模块的api:
读文件:
fs.readFile(参数1(文件的路径),参数2(编码方式),参数3(回调函数));
例:
fs.readFile("./node.js","utf8",(err,doc)=>{
    if(err==null){
        console.log(doc);  err读取成功时为null，失败时为一个对像，doc是读取到的数据
    }
})

往文件里面写东西:
例：
fs.writeFile(参数1(文件的路径),参数2(写入的数据),参数3(回调函数));
例：
fs.writeFile("./node导出.js",str,(err,doc)=>{
    if(err!=null) {
        console.log("写入失败");
    }
    console.log("写入成功");

});

删除文件:
fs.unlink(path(要删除的文件路径),(err,result)=>{})

===================================================

path系统模块：

注意:在node中相对路径是相对于命令行中的当前工作目录

var path = require("path");
path.join("路径名1","路径名2",...)拼接路径名;
__dirname;获得当前文件路径，注意是双下划线

===================================================

gulp系统模块：
gulp模块提供的方法：
gulp.src(): 获取任务要处理的文件
gulp.dest(): 输出文件
gulp.task(): 建立gulp任务
gulp.watch(): 监控文件的变化

例：
//引入gulp
const gulp = require("gulp");
//创建任务
//参数1.任务的名称
//参数2.任务的回调函数
gulp.task("first",()=>{

});
1.执行多个任务：
gulp.series(参数1，参数2，...，done=(){});传入的参数为要执行的任务
gulp.task("dafault",gulp.series('htmlmin',"less", done=> {
    // default task code here
    done();
}));
注意当任务名为dafauly的时候,控制台执行任务只需要输入gulp即可，不需要输入gulp dafault;

===================================================
gulp插件

const gulp = require("gulp");
const htmlmin = require("gulp-htmlmin");
const less= require("gulp-less");
const csso = require("gulp-csso");
const babel = require("gulp-babel");
const uglify = require("gulp-uglify");

//复制文本
gulp.task("copytext",done=>{
    console.log("这是复制文本");
    gulp.src("./src/demo2.html")
        .pipe(gulp.dest("dist/html"));
    done();
});

gulp-htmlmin: html文件压缩
下载 npm install gulp-htmlmin
//传递代码的时候要不要压缩空格，true代表压缩
//压缩html
gulp.task("htmlmin",done=>{
    console.log("压缩文本");
    gulp.src("./src/demo2.html")
        .pipe(htmlmin({collapseWhitespace: true}))
        .pipe(gulp.dest("./dist/html"));
    done();
});

gulp-csso: 压缩css
//css代码压缩
gulp.task("cssmin",done=>{
    console.log("css代码压缩");
    gulp.src("./src/css/*.css")
        .pipe(csso())
        .pipe(gulp.dest("./dist/css"));
    done();
});

gulp-babel: js语法转化 es6转es5
//将es6转为es5语法
gulp.task("babel",done=>{
    console.log("es6转es5");
    gulp.src("./src/js/base.js")
        .pipe(babel({
            //判断当前代码的运行环境，将代码转换为当前运行环境所支持的代码
            presets:['@babel/env']
        }))
        .pipe(gulp.dest("./dist/js"));
    done();
});

gulp-less: less 语法转化
//less语法转换
gulp.task("less",done=>{
    console.log("less语法转换");
    gulp.src("./src/css/*.less")
        .pipe(less())
        .pipe(gulp.dest("./dist/css"));
    done();
});

gulp-uglify: 压缩混淆js
//js代码压缩
gulp.task("uglify",done=>{
    console.log("js代码压缩");
    gulp.src("./src/js/base.js")
        .pipe(babel({
            //判断当前代码的运行环境，将代码转换为当前运行环境所支持的代码
            presets:['@babel/env']
        }))
        .pipe(uglify())
        .pipe(gulp.dest("./dist/js"));
    done();
});
下载 npm install gulp-uglify
const uglify = require("gulp-uglify");
.pipe(uglify());

gulp-file-include 公共文件提取
browsersync 浏览器实时同步
