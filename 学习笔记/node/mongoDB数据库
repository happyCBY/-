数据库： 数据库就是一个存放数据的仓库，它可以对数据进行分门别类的存储，它是独立于语言之外的软件，可以通过api去操作它

一个数据库软件可以包含多个数据库，一个数据库可以包含多个数据集合（数据库表），一个数据集合可以包含多条文档
术语                 解释说明
database              数据库
collection           数据集合
document               文档
field                  字段

注意！数据库的所有操作都是异步的

开启mongodb指令 net start mongodb 必须要管理员运行
关闭mongodb指令 net stop mongodb

连接mongodb:
代码:
const mongoose = require('mongoose');
mongoose.connect("mongodb://localhost/数据库名",{useNewUrlParser: true})
    .then(console.log("连接成功"))
    .catch((err)=>{
        console.log(err,"连接失败");
    });
=====================================
mongoDB数据库添加登录账户
1.以管理员身份运行powershell
2.连接数据库 mongo
3.查看数据库 show dbs
4.切换到admin数据库  use admin
5.创建超级管理员账号 user设置账号 pwd设置密码  roles设置角色 root为超级管理员
db.createUser({user:'root',pwd:'root',roles:['root']})
6.创建普通管理员账号  readWrite 说明该账户对数据库有读写的权限
db.createUser({user:'root',pwd:'root',roles:['readWrite']})
7.exit退出数据库
8.停止mongodb服务: net stop mongodb
9.卸载mongodb服务: mongod --remove
10. 创建mongodb服务  --auth代表需要账号密码才能进入数据库
mongod --logpath= (mongod.log这个文件的路径)  --dbpath=(数据库存储路径) --install --auth
11.在项目中使用账号连接数据库
mongoose.connect('mongodb://blog(用户名):blog(密码)@localhost:(默认为27017，可以不写)/database');

db.auth("账号"，"密码") 登录数据库账号密码




=====================================================
创建集合:
代码:
//创建集合
=======================================
//创建集合规则(表拥有的属性)
=======================================
const courseSchema = new mongoose.Schema({
    name: String,
    age: Number
});
给集合规则加验证信息
const courseSchema = new mongoose.Schema({
    name: {
        type: String, //字段值为Stirng类型
        required: true, //这个字段为必填字段
        (required: [true,"请传入用户名"] //自定义报错信息)
        minlength: 5 //定义传入的字符串最小长度
        (minlength: [5,"文字长度不得小于5"] //自定义报错信息)
        maxlength: 10 //定义传入的字符串最大长度
        (minlength: [10,"文字长度不得大于10"] //自定义报错信息)
        trim: true 将传入的字符串两端空格去除掉

        enum: ['张三','李四'] //设置当前字段可以拥有的值
        (enum: { 自定义报错信息
            values: ['张三','李四'],
            message: "验证失败"
        })
        //如果数据库已经存在该名字，则报错
        unique: true

        //自定义验证规则
        validate: {
            validator: (v)=> { v为用户插入文档时传入的值
                //里面写入用户定义的验证规则
                //返回一个boolean值
                //true 为验证成功，false 为验证失败
                return v&&v.length>4  //验证传入的字符串长度是否大于4
             },
            //自定义错误信息
            message: "传入的值不符合规则"
        }
    }
    age: {
        type: Number,
        min: 5, //数字不能小于5
        max: 100 //数字不能大于100
    }
    publishDate: {
        type： Date, //日期对象
        //如果没有传入该字段的值则使用默认值，default定义默认值
        default: Date.now //如果没有传入时间则使用当前时间为默认时间
    }
});


//使用规则创建集合  返回一个构造函数
const Course = mongoose.model("集合名",courseSchema(集合规则));

//插入数据
const course = new Course({
    name: "张三",
    age: 18
});
course.save();
//插入数据的另外一种方法
/////////////////////////
Course.create({
    name: "李四",
    age: 20
},(err,doc)=>{
    console.log(err);
    console.log(doc,"插入成功");
});
由于是异步操作，所以上述代码可以替换为以下代码:
1.Course.create({name: "李四",age: 20})
    .then(result => {console.log(result)})
    .catch(err=>{ console.log(err) });

2.Course.create({name: "李四",age: 20})
    .then(result => {console.log(result)})
    .catch(err=>{
         const errors = err.errors; //获取错误信息对象
         //遍历错误信息
         for(var attr in errors) {
             //将错误信息打到控制台中
             console.log(err[attr]["message"]);
         }
     });
///////////////////////////
mongoDB数据库导入数据
注意要先将mongoimport.exe文件所在的路径添加到path系统环境变量里面
mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件
注意！！！ 文件是 -- 而不是 -
例：mongoimport -d first -c datas --file ./data.json
///////////////////////////////
查询数据库
查询某数据库里某集合的所有文件
Demo.find().then(result=>{console.log(result)}).catch(err=>{console.log(err)});
查询满足条件的文档
Demo.find({name:"张秀梅",age: 70}).then(result=>{console.log(result)});
Demp.find({age:{$gt: 20,$lt:50}}).then(result=>{console.log(result)}); //年龄大于20，小于50  ($gte为大于等于，$lte为小于等于)
Demp.find({hobbies:{$in: "足球"}}).then(result=>{console.log(result)}); //hobbies里面包含足球的文档, $in:元素 查询数组里面是否含有这个元素


查询满足条件的第一个文档，如果没有查询条件默认返回第一个文档，注意返回的是一个对象
Demo.findOne({name:"张秀梅",age: 70}).then(result=>{console.log(result)});

查询指定的集合属性
Demo.find().select('字段1 字段2 ...').then(result=>{console.log(result)});
返回集合全部文档，里面只显示字段1和字段2的信息
Demo.find().select('字段1 -字段2 ...').then(result=>{console.log(result)});
返回集合全部文档，里面只显示字段1的信息,字段前面加个 - 就代表不返回该字段的信息

------------------------------------------------------------------
对查询结果进行排序
Demo.find().sort('age').then(result=>{console.log(result)}); //根据年龄字段进行升序排列
Demo.find().sort('-age').then(result=>{console.log(result)}); //根据年龄字段进行降序排列
------------------------------------------------------------------
skip和limit对查询结果进行跳过和限制查询数量操作
Demo.find().skip(2).limit(2).then(result=>{console.log(result)});
skip(2)跳过查询结果的两条数据，limit(2)限制查询结果只有两条

Demo.countDocuments() 查询匹配到的数据的数量，返回一个promise对象
===================================================
删除文档
删除单个文档，返回值为被删除的文档，如果查到多个文档则删除查到的第一个文档
Demo.findOneAndDelete({查询条件}).then(result=>{console.log(result)});

删除多个文档，返回值是一个对象里面包含n和ok两个属性，如果删除成功ok的值为1，n的值为删除的文档个数
Demo.deleteMany({查询条件}).then(result=>{console.log(result)});

=====================================================
修改文档:
更新单个文档，返回值为一个对象对象里面包含三个属性分别是n、nModified和ok,n代表修改的文档数量，ok值为1代表修改成功，nModified代表修改的意思
Demo.updateOne({查询条件},{要修改的值}).then(result=>{console.log(result)});

修改多个文档
Demo.updateMany({查询条件},{要修改的值}).then(result=>{console.log(result)});


========================================================
实现集合关联:

用户集合:
const User = mongoose.model("User",new mongoose.Schema({name: {type: String}}));
文章集合
const Post = mongoose.model("post"),new mongoose.Schema({
    title: {type: String},
    author: {
        type: mongoose.Schema.Types.ObjectId, //id关联
        ref: 'User(连接的集合名)' //和用户集合连接
    }
});

联合查询
Post.find()
    .populate("author")
    .then((err,result)=>{
        console.log(result);
    })

=============================================