Mock.mock()

Mock.mock( template )
根据数据模板生成模拟数据。

Mock.mock( rurl, template )
记录数据模板。当拦截到匹配 rurl 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。

Mock.mock( rurl, function( options ) )
记录用于生成响应数据的函数。当拦截到匹配 rurl 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。

Mock.mock( rurl, rtype, template )
记录数据模板。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，将根据数据模板 template 生成模拟数据，并作为响应数据返回。

Mock.mock( rurl, rtype, function( options ) )
记录用于生成响应数据的函数。当拦截到匹配 rurl 和 rtype 的 Ajax 请求时，函数 function(options) 将被执行，并把执行结果作为响应数据返回。

rurl
可选。
表示需要拦截的 URL，可以是 URL 字符串或 URL 正则。例如 /\/domain\/list\.json/、'/domian/list.json'。

rtype
可选。
表示需要拦截的 Ajax 请求类型。例如 GET、POST、PUT、DELETE 等。

template
可选。
表示数据模板，可以是对象或字符串。例如 { 'data|1-10':[{}] }、'@EMAIL'。

function(options)
可选。
表示用于生成响应数据的函数。

options
指向本次请求的 Ajax 选项集，含有 url、type 和 body 三个属性，参见 XMLHttpRequest 规范。

================================================
封装 获得get请求数据

var regexpUrl = 'http:\/\/localhost:8080\/index\/'

var strRouter = {
  demo: `${regexpUrl}demo+.*`,
  index: `${regexpUrl}index+.*`
}

Mock.mock(RegExp( strRouter.demo ) ,'get',function(option){
  var obj = formatURL(option.url)
  return obj
})
Mock.mock(RegExp( strRouter.index ) ,'get',function(option){
  var obj = formatURL(option.url)
  return obj
})

//接收get传递过来的参数，并将其转化为对象输出
function formatURL (url){
  var newurl = (url.split("?"))[1]
  var newUrl = newurl.split("&")
  var obj = {}
  for(var i = 0; i < newUrl.length; i++) {
    var arr = newUrl[i].split("=")
    obj[arr[0]] = arr[1]
  }
  return obj
}

==========================================
设置响应时间    Mock.setup()
Mock.setup( settings )
配置拦截 Ajax 请求时的行为。支持的配置项有：timeout。
settings
必选。

配置项集合。
timeout
可选。

指定被拦截的 Ajax 请求的响应时间，单位是毫秒。值可以是正整数，例如 400，表示 400 毫秒 后才会返回响应内容；也可以是横杠 '-' 风格的字符串，例如 '200-600'，表示响应时间介于 200 和 600 毫秒之间。默认值是'10-100'。

Mock.setup({
    timeout: 400
})
Mock.setup({
    timeout: '200-600'
})
