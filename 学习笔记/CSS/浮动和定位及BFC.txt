!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
css定位机制有三种:普通流(标准流),浮动,定位

普通流:普通流实际就是网页内标签元素正常从上到下,从左到右排列顺序的意思,比如块级元素会独占一行,行内元素会按顺序依次排列;按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局

浮动:浮动体现在漂浮的概念 它是浮在标准流上面 压住标准流 不占标准流空间
一般情况下定义一个标准流的父亲,然后在标准流的盒子里面浮动


注意事项:
1.一般情况下定义一个标准流的父亲,然后在标准流的盒子里面浮动,浮动的元素总是找离他最近的父级元素对齐,但是不会超过内边距的范围,意味着浮动只会在内容区域内进行
2.一个父盒子里面的子盒子,如果其中一个子级有浮动,则其他子级都需要浮动,这样他们才会一行对齐显示
3.块级元素和行内元素添加浮动后都具有 行内块元素 的特性:一行可以放多个,有宽度和高度,盒子大小由内容决定
4.浮动的目的就是让多个块级元素在同一行显示
5.一般标准流盒子父级没有设置高度的时候会撑开父级盒子，而浮动则不会，父亲高度不会被撑开

总结:
float  浮 漏 特
浮:  加了浮动的盒子是浮起来的,飘浮在其他标准流盒子上面
漏:  加了浮动的盒子,不占位置,原来的位置会漏给标准流盒子
特:  特别注意,首先浮动的盒子需要和标准流的父级搭配使用,其次注意浮动可以使元素显示模式体现为行内块的特性

清除浮动的方法:
1.父级添加overflow属性方法,overflow:hidden|auto|scroll 都可以清除浮动
overflow会触发BFC BFC可以清除浮动


2.使用after伪元素清除浮动
例:
.one {
	width: 300px;
}
.two,
.three {
	width: 100px;
	height: 100px;
	background-color: pink;
	float: left;
	margin: 10px;
}
.four {
	width: 200px;
	height: 200px;
	background-color: gray;
}
.clearfix::after {
	content: ".";  内容为小点，尽量不要加空，否则旧版本浏览器有空隙
	height: 0;     高度为零，不影响其他盒子
	visibility: hidden;  隐藏盒子
	clear: both;	清除浮动
	display: block;	转化为块级元素
}
.clearfix {
	*zoom: 1;
	*代表ie6,7能识别的特殊符号 带有*属性只有ie6,7才能执行zoom就是ie6,7清除浮动的方法
}
<div class="one clearfix">
	<div class="two"></div>
	<div class="three"></div>
</div>
<div class="four"></div>


3.使用before和after双伪元素清除浮动
例:
.one {
	width: 300px;
}
.two,
.three {
	width: 100px;
	height: 100px;
	background-color: pink;
	float: left;
	margin: 10px;
}
.four {
	width: 200px;
	height: 200px;
	background-color: gray;
}
.clearfix:after, .clearfix:before {
	content: ".";
	display: table;
}
.clearfix:after {
	clear: both;
}
.clearfix {
	*zoom:1;
}
<div class="one clearfix">
	<div class="two"></div>
	<div class="three"></div>
</div>
<div class="four"></div>


4.额外标签法:添加clear:both 清除左右浮动
例:
.one {
	width: 300px;
}
.two,
.three {
	width: 100px;
	height: 100px;
	background-color: pink;
	float: left;
	margin: 10px;
}
.four {
	width: 200px;
	height: 200px;
	background-color: gray;
}
.clear {
	clear: both;
}
<div class="one">
	<div class="two"></div>
	<div class="three"></div>
	<div class="clear"></div>
</div>
<div class="four"></div>


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

定位!
目的:如果说浮动的主要目的是让多个块级元素一行显示，那么定位的主要价值就是移动位置，让盒子到我们想要的位置上去。
类型:自动定位/静态定位(默认) 绝对定位  相对定位 固定定位

边偏移属性:top right bottom left

定位介绍:

静态定位:没有边偏移
position:static

相对定位:  相对于原标准流的位置进行定位
position:relative
注意:
1.相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来占有的地方继续占有。
2.其次，每次移动的位置，是以自己的左上角为基点移动(相对于自己来移动)
3.相对定位的盒子仍然是标准流，它后面的盒子仍以标准流方式对待它。(相对定位不脱标)


绝对定位:相对于其上一个已经定位的父元素进行定位,他会继承上一个定位父亲的属性，不会继承直接父亲的属性
position:absolute
注意:
1.绝对定位是完全脱标的，它不占有位置
2.如果所有父级没有定位属性，则相对于浏览器左上角进行定位
3.子绝父相 ，一般子元素用绝对定位，父元素就需要用相对定位

固定定位:相对于浏览器窗口进行定位 (ie6低版本不支持固定定位)
position:fixed
注意:
1.固定定位的元素和父亲没有任何关系。只认浏览器。
2.固定定位完全脱标，不占有位置，不随滚动条滚动。


z-index  图层叠放次序，定义元素的层叠等级属性
注意:
1.默认值为0,值越大，定位元素在层叠元素中越居上
2.如果取值相同，则根据书写顺序，后来居上
3.后面数字一定不能加单位
4.只有相对定位、绝对定位、固定定位有这个属性，其余标准流，浮动，静态均没有这个属性。


定位模式的转换:
注意:
1.跟浮动一样，元素添加了绝对定位和固定定位后，元素模式也会发生转换，都转换为行内块元素
2.因此，给一个行内元素添加固定或绝对定位后，可以不用转换模式，直接给宽高就行


display，visibility和hidden的区别
display：none 隐藏后不保留位置
visibility：hidden 隐藏后保留位置
overflow:visible(默认)|hidden|scroll|auto
visible:不剪切内容，也不添加滚动条
hidden:溢出内容隐藏
scroll:不管益不溢出都显示滚动条
auto:溢出显示滚动条







版心和布局流程

版心:
"版心"(可视区)是指网页中主题内容所在的区域.一般在浏览器窗口水平居中显示,常见的宽度值为960px,980px,1000px,1200px等.
布局流程:
1.确定页面的版心(可视区)
2.分析页面中的行模块,以及每个行模块中的列模块
3.制作html结构
4.css初始化,然后运用盒子模型的原理,通过Div+Css布局来控制网页的各个模块


BFC:是一块独立的渲染区域，与区域外部毫不相干，区域内的子盒子浮动定位都不会影响到
其他区域。
注意！不是所有的元素模式都能产生BFC
display属性为block,list-item,table的元素，可以产生BFC

给这些元素添加以下属性可以出发BFC
-float属性不为none
-position为absolute或fixed
-display为inline-block,table-cell,table-caption,flex,inline-flex
-overflow不为visible

BFC特性
1.在BFC中，盒子从顶端开始垂直的一个接一个地排列
2.盒子垂直方向的距离由margin决定。属于同一个BDC的两个相邻盒子的margin会发生重叠
3.在BFC中，每一个盒子的左外边缘会碰到盒子的左边缘（不会盖住盒子的边框）
4.BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。
5.计算BFC的高度时，自然会检测浮动的盒子高度
16403-F1B3-5E6C-F566-2849
